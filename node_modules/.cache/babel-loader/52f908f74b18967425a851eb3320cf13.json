{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/foodOrdering/src/components/store/cartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from \"./cartContext\";\nimport { useReducer } from \"react\";\n/*an item structure:\nid: props.id,\nname: props.name,\namount: amount,\nprice: props.price\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCart = {\n  items: [],\n  totalAmount: 0\n}; //reducer function needs a state snapshot (the last state), and an action\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_ITEM\") {\n    const existingItemInd = state.items.findIndex(item => item.id === action.item.id); //if the item exists in the items array, it will return an index. Otherwise it is null.\n\n    const existingItem = state.items[existingItemInd];\n    let updatedItem;\n    let updatedItems; //If the item does exist in the array, update the amount of the item, then update that item in the array\n\n    if (existingItem) {\n      let updatedItem = { ...existingItem,\n        amount: existingItem.amount + action.item.amount\n      };\n      let updatedItems = [...state.items];\n      updatedItems[existingItemInd] = updatedItem;\n    }\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE_ITEM\") {}\n}; //Cart Provider component will allow things wrapped in CartProvider access to the Cart Context store.\n\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchAction] = useReducer(cartReducer, defaultCart); //reformat by taking the cartState to include the methods then send that value over to the cartContext store.\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: item => {\n      addItemHandler(item);\n    },\n    removeItem: id => {\n      removeItemHandler(id);\n    }\n  };\n\n  const addItemHandler = item => {\n    dispatchAction({\n      type: \"ADD_ITEM\",\n      item: item\n    });\n  };\n\n  const removeItemHandler = item => {\n    dispatchAction({\n      type: \"REMOVE_ITEM\",\n      item: item\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"HoBysmQqTt3Go6pXusqt8SGz6ww=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["CartContext","useReducer","defaultCart","items","totalAmount","cartReducer","state","action","type","existingItemInd","findIndex","item","id","existingItem","updatedItem","updatedItems","amount","updatedTotalAmount","price","CartProvider","props","cartState","dispatchAction","cartContext","addItem","addItemHandler","removeItem","removeItemHandler","children"],"sources":["/Users/jennyhwang/Desktop/foodOrdering/src/components/store/cartProvider.js"],"sourcesContent":["import CartContext from \"./cartContext\";\nimport { useReducer } from \"react\";\n\n/*an item structure:\nid: props.id,\nname: props.name,\namount: amount,\nprice: props.price\n*/\n\n\nconst defaultCart = {\n  items: [],\n  totalAmount: 0,\n};\n\n\n//reducer function needs a state snapshot (the last state), and an action\nconst cartReducer = (state, action) => {\n\n\n if (action.type === \"ADD_ITEM\") {\n\nconst existingItemInd = state.items.findIndex(item => item.id === action.item.id);\n\n//if the item exists in the items array, it will return an index. Otherwise it is null.\nconst existingItem = state.items[existingItemInd]\n\nlet updatedItem;\nlet updatedItems;\n\n//If the item does exist in the array, update the amount of the item, then update that item in the array\nif (existingItem) {\n  let updatedItem = {...existingItem, \n  amount: existingItem.amount + action.item.amount}\n  let updatedItems = [...state.items];\n  updatedItems[existingItemInd] = updatedItem\n}\n\nconst updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\nreturn {\n    items: updatedItems,\n    totalAmount: updatedTotalAmount\n}\n }\n\n if (action.type === \"REMOVE_ITEM\") {\n     \n}\n\n\n};\n\n//Cart Provider component will allow things wrapped in CartProvider access to the Cart Context store.\n\nconst CartProvider = (props) => {\n\n\n  const [cartState, dispatchAction] = useReducer(cartReducer, defaultCart);\n\n  //reformat by taking the cartState to include the methods then send that value over to the cartContext store.\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: (item) => {addItemHandler(item)},\n    removeItem: (id) => {removeItemHandler(id)},\n  };\n\n  const addItemHandler = (item) => {\n    dispatchAction({\n      type: \"ADD_ITEM\",\n      item: item,\n    });\n  };\n\n  const removeItemHandler = (item) => {\n    dispatchAction({\n        type: \"REMOVE_ITEM\",\n        item: item,\n      });\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,EADW;EAElBC,WAAW,EAAE;AAFK,CAApB,C,CAMA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAGtC,IAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;IAEjC,MAAMC,eAAe,GAAGH,KAAK,CAACH,KAAN,CAAYO,SAAZ,CAAsBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACI,IAAP,CAAYC,EAAtD,CAAxB,CAFiC,CAIjC;;IACA,MAAMC,YAAY,GAAGP,KAAK,CAACH,KAAN,CAAYM,eAAZ,CAArB;IAEA,IAAIK,WAAJ;IACA,IAAIC,YAAJ,CARiC,CAUjC;;IACA,IAAIF,YAAJ,EAAkB;MAChB,IAAIC,WAAW,GAAG,EAAC,GAAGD,YAAJ;QAClBG,MAAM,EAAEH,YAAY,CAACG,MAAb,GAAsBT,MAAM,CAACI,IAAP,CAAYK;MADxB,CAAlB;MAEA,IAAID,YAAY,GAAG,CAAC,GAAGT,KAAK,CAACH,KAAV,CAAnB;MACAY,YAAY,CAACN,eAAD,CAAZ,GAAgCK,WAAhC;IACD;;IAED,MAAMG,kBAAkB,GAAGX,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYO,KAAZ,GAAoBX,MAAM,CAACI,IAAP,CAAYK,MAA/E;IACA,OAAO;MACHb,KAAK,EAAEY,YADJ;MAEHX,WAAW,EAAEa;IAFV,CAAP;EAIE;;EAED,IAAIV,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC,CAEnC;AAGA,CAjCD,C,CAmCA;;;AAEA,MAAMW,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAG9B,MAAM,CAACC,SAAD,EAAYC,cAAZ,IAA8BrB,UAAU,CAACI,WAAD,EAAcH,WAAd,CAA9C,CAH8B,CAK9B;;EACA,MAAMqB,WAAW,GAAG;IAClBpB,KAAK,EAAEkB,SAAS,CAAClB,KADC;IAElBC,WAAW,EAAEiB,SAAS,CAACjB,WAFL;IAGlBoB,OAAO,EAAGb,IAAD,IAAU;MAACc,cAAc,CAACd,IAAD,CAAd;IAAqB,CAHvB;IAIlBe,UAAU,EAAGd,EAAD,IAAQ;MAACe,iBAAiB,CAACf,EAAD,CAAjB;IAAsB;EAJzB,CAApB;;EAOA,MAAMa,cAAc,GAAId,IAAD,IAAU;IAC/BW,cAAc,CAAC;MACbd,IAAI,EAAE,UADO;MAEbG,IAAI,EAAEA;IAFO,CAAD,CAAd;EAID,CALD;;EAOA,MAAMgB,iBAAiB,GAAIhB,IAAD,IAAU;IAClCW,cAAc,CAAC;MACXd,IAAI,EAAE,aADK;MAEXG,IAAI,EAAEA;IAFK,CAAD,CAAd;EAID,CALD;;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEY,WAA7B;IAAA,UACGH,KAAK,CAACQ;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAhCD;;GAAMT,Y;;KAAAA,Y;AAkCN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}