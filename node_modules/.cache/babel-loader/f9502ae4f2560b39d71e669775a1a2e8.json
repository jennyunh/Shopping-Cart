{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/foodOrdering/src/components/store/cartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD_ITEM') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE_ITEM') {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n/*\nimport CartContext from \"./cartContext\";\nimport { useReducer } from \"react\";\n\n*/\n\n/*an item structure:\nid: props.id,\nname: props.name,\namount: amount,\nprice: props.price\n*/\n// const defaultCart = {\n//   items: [],\n//   totalAmount: 0,\n// };\n// //reducer function needs a state snapshot (the last state), and an action\n// const cartReducer = (state, action) => {\n//   if (action.type === \"ADD_ITEM\") {\n//     const existingItemInd = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n//     //if the item exists in the items array, it will return an index. Otherwise it is null.\n//     const existingItem = state.items[existingItemInd];\n//     let updatedItem;\n//     let updatedItems;\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n//     //If the item does exist in the array, update the amount of the item, then update that item in the array\n//     if (existingItem) {\n//       updatedItem = {\n//         ...existingItem,\n//         amount: existingItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingItemInd] = updatedItem;\n//     } else {\n//       updatedItem = { ...action.item };\n//       updatedItems = state.items.concat(action.item);\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   if (action.type === \"REMOVE_ITEM\") {\n//     const existingItemInd = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.items[existingItemInd];\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n//     let updatedItems;\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter((item) => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingItemInd] = updatedItem;\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount\n//     };\n//   }\n//   return defaultCart;\n// };\n// //Cart Provider component will allow things wrapped in CartProvider access to the Cart Context store.\n// const CartProvider = (props) => {\n//   const [cartState, dispatchAction] = useReducer(cartReducer, defaultCart);\n//   const addItemHandler = (item) => {\n//     dispatchAction({\n//       type: \"ADD_ITEM\",\n//       item: item,\n//     });\n//   };\n//   const removeItemHandler = (item) => {\n//     dispatchAction({\n//       type: \"REMOVE_ITEM\",\n//       item: item,\n//     });\n//   };\n//   //reformat by taking the cartState to include the methods then send that value over to the cartContext store.\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemHandler,\n//     removeItem: removeItemHandler\n//   };\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n// export default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"sources":["/Users/jennyhwang/Desktop/foodOrdering/src/components/store/cartProvider.js"],"sourcesContent":["import { useReducer } from 'react';\n\nimport CartContext from './cart-context';\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD_ITEM') {\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n  if (action.type === 'REMOVE_ITEM') {\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.id\n    );\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: 'ADD', item: item });\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: 'REMOVE', id: id });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n\n\n\n\n\n/*\nimport CartContext from \"./cartContext\";\nimport { useReducer } from \"react\";\n\n*/\n\n/*an item structure:\nid: props.id,\nname: props.name,\namount: amount,\nprice: props.price\n*/\n\n\n// const defaultCart = {\n//   items: [],\n//   totalAmount: 0,\n// };\n\n// //reducer function needs a state snapshot (the last state), and an action\n// const cartReducer = (state, action) => {\n\n//   if (action.type === \"ADD_ITEM\") {\n//     const existingItemInd = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n\n//     //if the item exists in the items array, it will return an index. Otherwise it is null.\n//     const existingItem = state.items[existingItemInd];\n\n//     let updatedItem;\n//     let updatedItems;\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n\n//     //If the item does exist in the array, update the amount of the item, then update that item in the array\n//     if (existingItem) {\n//       updatedItem = {\n//         ...existingItem,\n//         amount: existingItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingItemInd] = updatedItem;\n//     } else {\n//       updatedItem = { ...action.item };\n//       updatedItems = state.items.concat(action.item);\n//     }\n\n\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n\n\n\n\n//   if (action.type === \"REMOVE_ITEM\") {\n//     const existingItemInd = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.items[existingItemInd];\n\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n//     let updatedItems;\n\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter((item) => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingItemInd] = updatedItem;\n//     }\n\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount\n//     };\n//   }\n\n//   return defaultCart;\n// };\n\n// //Cart Provider component will allow things wrapped in CartProvider access to the Cart Context store.\n\n// const CartProvider = (props) => {\n//   const [cartState, dispatchAction] = useReducer(cartReducer, defaultCart);\n\n\n//   const addItemHandler = (item) => {\n//     dispatchAction({\n//       type: \"ADD_ITEM\",\n//       item: item,\n//     });\n//   };\n\n//   const removeItemHandler = (item) => {\n//     dispatchAction({\n//       type: \"REMOVE_ITEM\",\n//       item: item,\n//     });\n//   };\n\n\n//   //reformat by taking the cartState to include the methods then send that value over to the cartContext store.\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemHandler,\n//     removeItem: removeItemHandler\n//   };\n\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// export default CartProvider;\n\n"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EADgB;EAEvBC,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACrC,IAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;IAC9B,MAAMC,kBAAkB,GACtBH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MADtD;IAGA,MAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADN,CAA9B;IAGA,MAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB;IACA,IAAII,YAAJ;;IAEA,IAAID,gBAAJ,EAAsB;MACpB,MAAME,WAAW,GAAG,EAClB,GAAGF,gBADe;QAElBJ,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE;MAF5B,CAApB;MAIAK,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;MACAc,YAAY,CAACJ,qBAAD,CAAZ,GAAsCK,WAAtC;IACD,CAPD,MAOO;MACLD,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf;IACD;;IAED,OAAO;MACLP,KAAK,EAAEc,YADF;MAELb,WAAW,EAAEK;IAFR,CAAP;EAID;;EACD,IAAIF,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC;IACjC,MAAMK,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACQ,EADD,CAA9B;IAGA,MAAMK,YAAY,GAAGd,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAArB;IACA,MAAMJ,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBgB,YAAY,CAACT,KAA5D;IACA,IAAIM,YAAJ;;IACA,IAAIG,YAAY,CAACR,MAAb,KAAwB,CAA5B,EAA+B;MAC7BK,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYkB,MAAZ,CAAmBX,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACQ,EAA9C,CAAf;IACD,CAFD,MAEO;MACL,MAAMG,WAAW,GAAG,EAAE,GAAGE,YAAL;QAAmBR,MAAM,EAAEQ,YAAY,CAACR,MAAb,GAAsB;MAAjD,CAApB;MACAK,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;MACAc,YAAY,CAACJ,qBAAD,CAAZ,GAAsCK,WAAtC;IACD;;IAED,OAAO;MACLf,KAAK,EAAEc,YADF;MAELb,WAAW,EAAEK;IAFR,CAAP;EAID;;EAED,OAAOP,gBAAP;AACD,CAjDD;;AAmDA,MAAMoB,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAC9B,MAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCzB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;EAKA,MAAMwB,oBAAoB,GAAIhB,IAAD,IAAU;IACrCe,kBAAkB,CAAC;MAAEjB,IAAI,EAAE,KAAR;MAAeE,IAAI,EAAEA;IAArB,CAAD,CAAlB;EACD,CAFD;;EAIA,MAAMiB,yBAAyB,GAAIZ,EAAD,IAAQ;IACxCU,kBAAkB,CAAC;MAAEjB,IAAI,EAAE,QAAR;MAAkBO,EAAE,EAAEA;IAAtB,CAAD,CAAlB;EACD,CAFD;;EAIA,MAAMa,WAAW,GAAG;IAClBzB,KAAK,EAAEqB,SAAS,CAACrB,KADC;IAElBC,WAAW,EAAEoB,SAAS,CAACpB,WAFL;IAGlByB,OAAO,EAAEH,oBAHS;IAIlBI,UAAU,EAAEH;EAJM,CAApB;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEC,WAA7B;IAAA,UACGL,KAAK,CAACQ;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA1BD;;GAAMT,Y;;KAAAA,Y;AA4BN,eAAeA,YAAf;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}