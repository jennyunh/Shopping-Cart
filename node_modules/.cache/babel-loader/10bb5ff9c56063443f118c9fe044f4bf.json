{"ast":null,"code":"/*\nimport CartContext from \"./cartContext\";\nimport { useReducer } from \"react\";\n\n*/\n\n/*an item structure:\nid: props.id,\nname: props.name,\namount: amount,\nprice: props.price\n*/\n// const defaultCart = {\n//   items: [],\n//   totalAmount: 0,\n// };\n// //reducer function needs a state snapshot (the last state), and an action\n// const cartReducer = (state, action) => {\n//   if (action.type === \"ADD_ITEM\") {\n//     const existingItemInd = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n//     //if the item exists in the items array, it will return an index. Otherwise it is null.\n//     const existingItem = state.items[existingItemInd];\n//     let updatedItem;\n//     let updatedItems;\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n//     //If the item does exist in the array, update the amount of the item, then update that item in the array\n//     if (existingItem) {\n//       updatedItem = {\n//         ...existingItem,\n//         amount: existingItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingItemInd] = updatedItem;\n//     } else {\n//       updatedItem = { ...action.item };\n//       updatedItems = state.items.concat(action.item);\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   if (action.type === \"REMOVE_ITEM\") {\n//     const existingItemInd = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.items[existingItemInd];\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n//     let updatedItems;\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter((item) => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingItemInd] = updatedItem;\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount\n//     };\n//   }\n//   return defaultCart;\n// };\n// //Cart Provider component will allow things wrapped in CartProvider access to the Cart Context store.\n// const CartProvider = (props) => {\n//   const [cartState, dispatchAction] = useReducer(cartReducer, defaultCart);\n//   const addItemHandler = (item) => {\n//     dispatchAction({\n//       type: \"ADD_ITEM\",\n//       item: item,\n//     });\n//   };\n//   const removeItemHandler = (item) => {\n//     dispatchAction({\n//       type: \"REMOVE_ITEM\",\n//       item: item,\n//     });\n//   };\n//   //reformat by taking the cartState to include the methods then send that value over to the cartContext store.\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemHandler,\n//     removeItem: removeItemHandler\n//   };\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n// export default CartProvider;","map":{"version":3,"names":[],"sources":["/Users/jennyhwang/Desktop/foodOrdering/src/components/store/cartProvider.js"],"sourcesContent":["\n\n\n\n\n\n/*\nimport CartContext from \"./cartContext\";\nimport { useReducer } from \"react\";\n\n*/\n\n/*an item structure:\nid: props.id,\nname: props.name,\namount: amount,\nprice: props.price\n*/\n\n\n// const defaultCart = {\n//   items: [],\n//   totalAmount: 0,\n// };\n\n// //reducer function needs a state snapshot (the last state), and an action\n// const cartReducer = (state, action) => {\n\n//   if (action.type === \"ADD_ITEM\") {\n//     const existingItemInd = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n\n//     //if the item exists in the items array, it will return an index. Otherwise it is null.\n//     const existingItem = state.items[existingItemInd];\n\n//     let updatedItem;\n//     let updatedItems;\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n\n//     //If the item does exist in the array, update the amount of the item, then update that item in the array\n//     if (existingItem) {\n//       updatedItem = {\n//         ...existingItem,\n//         amount: existingItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingItemInd] = updatedItem;\n//     } else {\n//       updatedItem = { ...action.item };\n//       updatedItems = state.items.concat(action.item);\n//     }\n\n\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n\n\n\n\n//   if (action.type === \"REMOVE_ITEM\") {\n//     const existingItemInd = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.items[existingItemInd];\n\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n//     let updatedItems;\n\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter((item) => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingItemInd] = updatedItem;\n//     }\n\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount\n//     };\n//   }\n\n//   return defaultCart;\n// };\n\n// //Cart Provider component will allow things wrapped in CartProvider access to the Cart Context store.\n\n// const CartProvider = (props) => {\n//   const [cartState, dispatchAction] = useReducer(cartReducer, defaultCart);\n\n\n//   const addItemHandler = (item) => {\n//     dispatchAction({\n//       type: \"ADD_ITEM\",\n//       item: item,\n//     });\n//   };\n\n//   const removeItemHandler = (item) => {\n//     dispatchAction({\n//       type: \"REMOVE_ITEM\",\n//       item: item,\n//     });\n//   };\n\n\n//   //reformat by taking the cartState to include the methods then send that value over to the cartContext store.\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemHandler,\n//     removeItem: removeItemHandler\n//   };\n\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// export default CartProvider;\n\n"],"mappings":"AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}