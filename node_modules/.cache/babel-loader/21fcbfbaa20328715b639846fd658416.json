{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/foodOrdering/src/components/store/cartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from \"./cartContext\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCart = {\n  items: [],\n  totalAmount: 0\n}; //reducer function needs a state snapshot (the last state), and an action\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_ITEM\") {\n    const updatedItems = state.items.concat(action.item);\n    const existingItemInd = state.items.findIndex();\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE_ITEM\") {}\n}; //Cart Provider component will allow things wrapped in CartProvider access to the Cart Context store.\n\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchAction] = useReducer(cartReducer, defaultCart); //reformat by taking the cartState to include the methods then send that value over to the cartContext store.\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: item => {\n      addItemHandler(item);\n    },\n    removeItem: id => {\n      removeItemHandler(id);\n    }\n  };\n\n  const addItemHandler = item => {\n    dispatchAction({\n      type: \"ADD_ITEM\",\n      item: item\n    });\n  };\n\n  const removeItemHandler = item => {\n    dispatchAction({\n      type: \"REMOVE_ITEM\",\n      item: item\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"HoBysmQqTt3Go6pXusqt8SGz6ww=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["CartContext","useReducer","defaultCart","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","existingItemInd","findIndex","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchAction","cartContext","addItem","addItemHandler","removeItem","id","removeItemHandler","children"],"sources":["/Users/jennyhwang/Desktop/foodOrdering/src/components/store/cartProvider.js"],"sourcesContent":["import CartContext from \"./cartContext\";\nimport { useReducer } from \"react\";\n\nconst defaultCart = {\n  items: [],\n  totalAmount: 0,\n};\n\n\n//reducer function needs a state snapshot (the last state), and an action\nconst cartReducer = (state, action) => {\n\n\n if (action.type === \"ADD_ITEM\") {\nconst updatedItems = state.items.concat(action.item);\n\nconst existingItemInd = state.items.findIndex();\n\nconst updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\nreturn {\n    items: updatedItems,\n    totalAmount: updatedTotalAmount\n}\n }\n\n if (action.type === \"REMOVE_ITEM\") {\n     \n}\n\n\n};\n\n//Cart Provider component will allow things wrapped in CartProvider access to the Cart Context store.\n\nconst CartProvider = (props) => {\n\n\n  const [cartState, dispatchAction] = useReducer(cartReducer, defaultCart);\n\n  //reformat by taking the cartState to include the methods then send that value over to the cartContext store.\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: (item) => {addItemHandler(item)},\n    removeItem: (id) => {removeItemHandler(id)},\n  };\n\n  const addItemHandler = (item) => {\n    dispatchAction({\n      type: \"ADD_ITEM\",\n      item: item,\n    });\n  };\n\n  const removeItemHandler = (item) => {\n    dispatchAction({\n        type: \"REMOVE_ITEM\",\n        item: item,\n      });\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;;AAEA,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,EADW;EAElBC,WAAW,EAAE;AAFK,CAApB,C,CAMA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAGtC,IAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;IACjC,MAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;IAEA,MAAMC,eAAe,GAAGN,KAAK,CAACH,KAAN,CAAYU,SAAZ,EAAxB;IAEA,MAAMC,kBAAkB,GAAGR,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYI,KAAZ,GAAoBR,MAAM,CAACI,IAAP,CAAYK,MAA/E;IACA,OAAO;MACHb,KAAK,EAAEM,YADJ;MAEHL,WAAW,EAAEU;IAFV,CAAP;EAIE;;EAED,IAAIP,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC,CAEnC;AAGA,CApBD,C,CAsBA;;;AAEA,MAAMS,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAG9B,MAAM,CAACC,SAAD,EAAYC,cAAZ,IAA8BnB,UAAU,CAACI,WAAD,EAAcH,WAAd,CAA9C,CAH8B,CAK9B;;EACA,MAAMmB,WAAW,GAAG;IAClBlB,KAAK,EAAEgB,SAAS,CAAChB,KADC;IAElBC,WAAW,EAAEe,SAAS,CAACf,WAFL;IAGlBkB,OAAO,EAAGX,IAAD,IAAU;MAACY,cAAc,CAACZ,IAAD,CAAd;IAAqB,CAHvB;IAIlBa,UAAU,EAAGC,EAAD,IAAQ;MAACC,iBAAiB,CAACD,EAAD,CAAjB;IAAsB;EAJzB,CAApB;;EAOA,MAAMF,cAAc,GAAIZ,IAAD,IAAU;IAC/BS,cAAc,CAAC;MACbZ,IAAI,EAAE,UADO;MAEbG,IAAI,EAAEA;IAFO,CAAD,CAAd;EAID,CALD;;EAOA,MAAMe,iBAAiB,GAAIf,IAAD,IAAU;IAClCS,cAAc,CAAC;MACXZ,IAAI,EAAE,aADK;MAEXG,IAAI,EAAEA;IAFK,CAAD,CAAd;EAID,CALD;;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEU,WAA7B;IAAA,UACGH,KAAK,CAACS;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAhCD;;GAAMV,Y;;KAAAA,Y;AAkCN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}